# 1. Write a query to display customer full name with their title (Mr/Ms), both first name and last name are in upper case, customer email id, customer creation date and display customerâ€™s category after applying below categorization rules: i) IF customer creation date Year <2005 Then Category A ii) IF customer creation date Year >=2005 and <2011 Then Category B iii)IF customer creation date Year>= 2011 Then Category C Hint: Use CASE statement, no permanent change in table required. 
#[NOTE: TABLES to be used - ONLINE_CUSTOMER TABLE]
USE orders;

SELECT CONCAT(CASE WHEN CUSTOMER_GENDER='M' THEN 'MR' ELSE 'MS' END,' ',UCASE(CUSTOMER_FNAME),' ' ,UCASE(CUSTOMER_LNAME)) AS CUSTOMER_FULLNAME,
	   CUSTOMER_EMAIL,CUSTOMER_CREATION_DATE,
	   CASE WHEN YEAR(CUSTOMER_CREATION_DATE)  <2005 THEN 'CATEGORY A'
			WHEN YEAR(CUSTOMER_CREATION_DATE)>=2005 AND  YEAR(CUSTOMER_CREATION_DATE)<2011 THEN 'CATEGORY B' 
			WHEN YEAR(CUSTOMER_CREATION_DATE)>= 2011 THEN 'CATEGORY C' 
		END AS CUSTOMERS_CATEGORY
FROM ONLINE_CUSTOMER;


#2. Write a query to display the following information for the products, which have not been sold: product_id, product_desc, product_quantity_avail, 
#product_price, inventory values (product_quantity_avail*product_price), New_Price after applying discount as per below criteria. Sort the output with respect to
 #decreasing value of Inventory_Value.
 #i) IF Product Price > 200,000 then apply 20% discount ii) IF Product Price > 100,000 then apply 15% discount 
 #iii) IF Product Price =< 100,000 then apply 10% discount # Hint: Use CASE statement, no permanent change in table required. 
#[NOTE: TABLES to be used - PRODUCT, ORDER_ITEMS TABLE]


SELECT P.PRODUCT_ID, P.PRODUCT_DESC, P.PRODUCT_QUANTITY_AVAIL, (PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE)AS INVENTORY_VALUES,
		CASE WHEN PRODUCT_PRICE > 200000 THEN 0.8* PRODUCT_PRICE
			 WHEN PRODUCT_PRICE > 100000 THEN  0.85* PRODUCT_PRICE
			 WHEN PRODUCT_PRICE =100000 OR PRODUCT_PRICE <100000  THEN  0.9* PRODUCT_PRICE
		END AS NEW_PRICE,PRODUCT_PRICE
FROM PRODUCT P
WHERE P.PRODUCT_ID  NOT IN (SELECT P.PRODUCT_ID 
FROM ORDER_ITEMS P) 
ORDER BY INVENTORY_VALUES DESC;


#3. Write a query to display Product_class_code, Product_class_description, 
#Count of Product type in each productclass, Inventory Value (p.product_quantity_avail*p.product_price). Information should be displayed for only those
# product_class_code which have more than 1,00,000. Inventory Value. Sort the output with respect to decreasing value of Inventory_Value. 
#[NOTE: TABLES to be used - PRODUCT_CLASS, PRODUCT_CLASS_CODE]

SELECT P.PRODUCT_CLASS_CODE,PRODUCT_CLASS_DESC, COUNT(PRODUCT_ID) AS COUNT_PRODUCT_TYPE, (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE) AS INVENTORY_VALUE 
FROM PRODUCT P
JOIN PRODUCT_CLASS PC
ON P.PRODUCT_CLASS_CODE =  PC.PRODUCT_CLASS_CODE
WHERE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE) > 100000
GROUP BY P.PRODUCT_CLASS_CODE
ORDER BY INVENTORY_VALUE DESC;


#4. Write a query to display customer_id, full name, customer_email, customer_phone and country of customers who have cancelled all the orders placed by them (USE SUB-QUERY)
#[NOTE: TABLES to be used - ONLINE_CUSTOMER, ADDRESSS, OREDER_HEARDER]

SELECT CUSTOMER_ID, CONCAT(UCASE(CUSTOMER_FNAME),' ',UCASE(CUSTOMER_LNAME)) AS CUSTOMER_FULL_NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE, COUNTRY
FROM ONLINE_CUSTOMER O
JOIN ADDRESS A
ON O.ADDRESS_ID= A.ADDRESS_ID
WHERE  CUSTOMER_ID IN (SELECT CUSTOMER_ID FROM ORDER_HEADER
WHERE ORDER_STATUS='CANCELLED');

SELECT O.CUSTOMER_ID, CONCAT(UCASE(CUSTOMER_FNAME),' ',UCASE(CUSTOMER_LNAME)) AS CUSTOMER_FULL_NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE, COUNTRY
FROM ONLINE_CUSTOMER O
JOIN ADDRESS A
ON O.ADDRESS_ID= A.ADDRESS_ID
INNER JOIN ORDER_HEADER OH
ON OH.CUSTOMER_ID = O.CUSTOMER_ID 
WHERE OH.ORDER_STATUS = 'CANCELLED';

#5. Write a query to display Shipper name, City to which it is catering, num of customer catered by the shipper in the city and 
#number of consignments delivered to that city for Shipper DHL [NOTE: TABLES to be used - SHIPPER,ONLINE_CUSTOMER, ADDRESSS, ORDER_HEARDER]


SELECT SHIPPER_NAME ,A.CITY, COUNT(O.CUSTOMER_ID) AS NO_OF_CUSTOMER_CATERED, COUNT(OH.ORDER_ID) AS NO_OF_CONSIGNMENTS_DELIVERED
FROM ONLINE_CUSTOMER O
JOIN ORDER_HEADER OH ON O.CUSTOMER_ID=OH.CUSTOMER_ID AND OH.ORDER_STATUS = 'SHIPPED'
JOIN SHIPPER S ON OH.SHIPPER_ID=S.SHIPPER_ID
JOIN ADDRESS A ON O.ADDRESS_ID=A.ADDRESS_ID
WHERE SHIPPER_NAME = 'DHL'
GROUP BY A.CITY
ORDER BY SHIPPER_NAME,CITY DESC;

#6. Write a query to display product_id, product_desc, product_quantity_avail, quantity sold, quantity available and show inventory Status of products as below as 
#per below condition: a.>> For Electronics and Computer categories, if sales till date is Zero then show 'No Sales in past, give discount to reduce inventory', 
#if inventory quantity is less than 10% of quantity sold,show 'Low inventory, need to add inventory', if inventory quantity is less than 50% of quantity sold, 
#show 'Medium inventory, need to add some inventory', if inventory quantity is more or equal to 50% of quantity sold, show 'Sufficient inventory' 
#b.>> For Mobiles and Watches categories, if sales till date is Zero then show 'No Sales in past, give discount to reduce inventory', 
#if inventory quantity is less than 20% of quantity sold, show 'Low inventory, need to add inventory', 
#if inventory quantity is less than 60% of quantity sold, show 'Medium inventory, need to add some inventory', 
#if inventory quantity is more or equal to 60% of quantity sold, show 'Sufficient inventory' 
#c. >>>Rest of the categories, if sales till date is Zero then show 'No Sales in past, give discount to reduce inventory',
# if inventory quantity is less than 30% of quantity sold, show 'Low inventory, need to add inventory', if inventory quantity is less than 70% of quantity sold,
# show 'Medium inventory, need to add some inventory', if inventory quantity is more or equal to 70% of quantity sold, show 'Sufficient inventory' 
#-- (USE SUB-QUERY) -- [NOTE: TABLES to be used - PRODUCT, PRODUCT_CLASS, ORDER_HEADER]

SELECT PRODUCT_ID, PRODUCT_DESC,PRODUCT_QUANTITY_AVAIL,QUANTITY_SOLD,QUANTITY_AVAILABLE, 
CASE WHEN QUANTITY_SOLD = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
	 WHEN QUANTITY_AVAILABLE < (0.1 * QUANTITY_SOLD) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
     WHEN QUANTITY_AVAILABLE < (0.5 * QUANTITY_SOLD) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
     WHEN QUANTITY_AVAILABLE >  (0.5 * QUANTITY_SOLD) THEN 'SUFFICIENT INVENTORY' END AS INVENTORY_STATUS
FROM
(SELECT P.PRODUCT_ID,P.PRODUCT_DESC,P.PRODUCT_QUANTITY_AVAIL, SUM(OI.PRODUCT_QUANTITY) AS QUANTITY_SOLD, 
(P.PRODUCT_QUANTITY_AVAIL - SUM(OI.PRODUCT_QUANTITY)) AS QUANTITY_AVAILABLE
FROM PRODUCT P
INNER JOIN PRODUCT_CLASS PC
ON P.PRODUCT_CLASS_CODE=PC.PRODUCT_CLASS_CODE
INNER JOIN ORDER_ITEMS OI
ON OI.PRODUCT_ID = P.PRODUCT_ID
INNER JOIN ORDER_HEADER OH
ON OH.ORDER_ID = OI.ORDER_ID AND OH.ORDER_STATUS NOT IN ('CANCELLED')
WHERE P.PRODUCT_CLASS_CODE IN ('2050','2053')
GROUP BY PRODUCT_ID) AS ELECTRONICSANDCOMPUTER
UNION ALL
SELECT PRODUCT_ID, PRODUCT_DESC,PRODUCT_QUANTITY_AVAIL,QUANTITY_SOLD,QUANTITY_AVAILABLE, 
CASE WHEN QUANTITY_SOLD = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
	 WHEN QUANTITY_AVAILABLE < (0.2 * QUANTITY_SOLD) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
     WHEN QUANTITY_AVAILABLE < (0.6 * QUANTITY_SOLD) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
     WHEN QUANTITY_AVAILABLE >  (0.6 * QUANTITY_SOLD) THEN 'SUFFICIENT INVENTORY' END AS INVENTORY_STATUS
FROM
(SELECT P.PRODUCT_ID,P.PRODUCT_DESC,P.PRODUCT_QUANTITY_AVAIL, SUM(OI.PRODUCT_QUANTITY) AS QUANTITY_SOLD, 
(P.PRODUCT_QUANTITY_AVAIL - SUM(OI.PRODUCT_QUANTITY)) AS QUANTITY_AVAILABLE
FROM PRODUCT P
INNER JOIN PRODUCT_CLASS PC
ON P.PRODUCT_CLASS_CODE=PC.PRODUCT_CLASS_CODE
INNER JOIN ORDER_ITEMS OI
ON OI.PRODUCT_ID = P.PRODUCT_ID
INNER JOIN ORDER_HEADER OH
ON OH.ORDER_ID = OI.ORDER_ID AND OH.ORDER_STATUS NOT IN ('CANCELLED')
WHERE P.PRODUCT_CLASS_CODE IN ('2055','2057')
GROUP BY PRODUCT_ID) AS MOBILEANDWATCHES
 UNION ALL
SELECT PRODUCT_ID, PRODUCT_DESC,PRODUCT_QUANTITY_AVAIL,QUANTITY_SOLD,QUANTITY_AVAILABLE, 
CASE WHEN QUANTITY_SOLD = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
	 WHEN QUANTITY_AVAILABLE < (0.3 * QUANTITY_SOLD) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
     WHEN QUANTITY_AVAILABLE < (0.7 * QUANTITY_SOLD) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
     WHEN QUANTITY_AVAILABLE >  (0.7 * QUANTITY_SOLD) THEN 'SUFFICIENT INVENTORY' END AS INVENTORY_STATUS
FROM
(SELECT P.PRODUCT_ID,P.PRODUCT_DESC,P.PRODUCT_QUANTITY_AVAIL, SUM(OI.PRODUCT_QUANTITY) AS QUANTITY_SOLD, 
(P.PRODUCT_QUANTITY_AVAIL - SUM(OI.PRODUCT_QUANTITY)) AS QUANTITY_AVAILABLE
FROM PRODUCT P
INNER JOIN PRODUCT_CLASS PC
ON P.PRODUCT_CLASS_CODE=PC.PRODUCT_CLASS_CODE
INNER JOIN ORDER_ITEMS OI
ON OI.PRODUCT_ID = P.PRODUCT_ID
INNER JOIN ORDER_HEADER OH
ON OH.ORDER_ID = OI.ORDER_ID AND OH.ORDER_STATUS NOT IN ('CANCELLED')
WHERE P.PRODUCT_CLASS_CODE NOT IN ('2050','2053','2055','2057')
GROUP BY PRODUCT_ID) AS REST_CATEGORIES;

#7. Write a query to display order_id and volume of the biggest order (in terms of volume) that can fit in carton id 10 
#-- [NOTE: TABLES to be used - CARTON, ORDER_ITEMS, PRODUCT]

SELECT ORDER_ID, TOTAL_VOLUME  FROM 
(SELECT ORDER_ID, SUM(VOLUME) AS TOTAL_VOLUME
FROM (
SELECT  O.ORDER_ID, O.PRODUCT_ID, (P.LEN * P.WIDTH * P.HEIGHT * O.PRODUCT_QUANTITY) AS VOLUME,P.LEN , P.WIDTH , P.HEIGHT , O.PRODUCT_QUANTITY
FROM ORDER_ITEMS O
JOIN PRODUCT P
ON O.PRODUCT_ID = P.PRODUCT_ID
ORDER BY O.ORDER_ID ASC) TOT
GROUP BY ORDER_ID
ORDER BY TOTAL_VOLUME DESC) ORDER_VOLUME
WHERE TOTAL_VOLUME < (SELECT (P.LEN * P.WIDTH * P.HEIGHT) FROM CARTON P WHERE CARTON_ID = 10)
LIMIT 1;

#8. Write a query to display customer id, customer full name, total quantity and total value (quantity*price) shipped where mode of payment is Cash and 
#customer last name starts with 'G' --[NOTE: TABLES to be used - ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]

SELECT CUSTOMER_ID, CUSTOMER_FULLNAME, SUM(PRODUCT_QUANTITY) AS TOTAL_QUANTITY, SUM(TOTAL_VALUE) AS TOTAL_VALUE  FROM
(SELECT OC.CUSTOMER_ID, CONCAT(UCASE(CUSTOMER_FNAME),' ',UCASE(CUSTOMER_LNAME)) AS CUSTOMER_FULLNAME, PRODUCT_QUANTITY,
 PRODUCT_PRICE, PRODUCT_QUANTITY * PRODUCT_PRICE AS TOTAL_VALUE, P.PRODUCT_ID
FROM ONLINE_CUSTOMER OC
INNER JOIN  ORDER_HEADER OH ON OC.CUSTOMER_ID = OH.CUSTOMER_ID
INNER JOIN ORDER_ITEMS OI ON OI.ORDER_ID = OH.ORDER_ID
INNER JOIN PRODUCT P ON P.PRODUCT_ID = OI.PRODUCT_ID
WHERE ORDER_STATUS = 'SHIPPED' AND PAYMENT_MODE = 'CASH' AND OC.CUSTOMER_LNAME LIKE 'G%') ORDERITEMS
GROUP BY OC.CUSTOMER_ID;	

#9. Write a query to display product_id, product_desc and total quantity of products which are sold together with product id 201 
# and are not shipped to city Bangalore and New Delhi. Display the output in descending order with respect to the tot_qty. 
#-- (USE SUB-QUERY) -- [NOTE: TABLES to be used - order_items, product,order_head, online_customer, address]

SELECT PRODUCT_ID, PRODUCT_DESC, TOTAL_QUANTITY
FROM (
SELECT O.PRODUCT_ID,P.PRODUCT_DESC,SUM(PRODUCT_QUANTITY) AS TOTAL_QUANTITY
FROM PRODUCT P
INNER JOIN ORDER_ITEMS O ON P.PRODUCT_ID=O.PRODUCT_ID
INNER JOIN ORDER_HEADER OH ON O.ORDER_ID=OH.ORDER_ID
INNER JOIN ONLINE_CUSTOMER OC ON OC.CUSTOMER_ID=OH.CUSTOMER_ID
INNER JOIN ADDRESS A ON OC.ADDRESS_ID=A.ADDRESS_ID 
WHERE O.ORDER_ID IN (SELECT ORDER_ID FROM ORDER_ITEMS
WHERE PRODUCT_ID='201') AND CITY NOT IN('BANGALORE','NEW DELHI') 
GROUP BY P.PRODUCT_ID
ORDER BY TOTAL_QUANTITY DESC) AS SOLD
WHERE PRODUCT_ID !='201';

#10. Write a query to display the order_id,customer_id and customer fullname, total quantity of products shipped for order ids which are even 
#and shipped to address where pincode is not starting with "5" -- [NOTE: TABLES to be used - online_customer,Order_header, order_items,address]

SELECT O.ORDER_ID,OC.CUSTOMER_ID,CONCAT(UCASE(OC.CUSTOMER_FNAME),' ',UCASE(OC.CUSTOMER_LNAME)) AS CUSTOMER_FULLNAME,SUM(PRODUCT_QUANTITY) AS TOTAL_QUANTITY
FROM ORDER_ITEMS O
INNER JOIN ORDER_HEADER OH
ON O.ORDER_ID=OH.ORDER_ID
INNER JOIN ONLINE_CUSTOMER OC
ON OC.CUSTOMER_ID=OH.CUSTOMER_ID
INNER JOIN ADDRESS A 
ON A.ADDRESS_ID=OC.ADDRESS_ID
WHERE O.ORDER_ID IN (SELECT ORDER_ID FROM ORDER_ITEMS WHERE MOD(ORDER_ID,2) = 0)
AND PINCODE NOT LIKE '5%'
GROUP BY O.ORDER_ID;